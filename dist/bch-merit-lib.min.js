!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).BchMessage=t()}}((function(){return class{constructor(t={}){if(!t.wallet)throw new Error("minimal-slp-wallet instance must be passed in the config object when instantiating.");this.wallet=t.wallet,this.merit=new class{constructor(t={}){if(!t.wallet)throw new Error("Instance of minimal-slp-wallet must be passed in the config object when instantiating.");this.wallet=t.wallet,this.bchjs=t.wallet.bchjs}async getTokenUtxos(t,e,r){try{if(!e)throw new Error("tokenId must be specified!");return t=this.bchjs.SLP.Address.toCashAddress(t),(await this.wallet.getUtxos(t)).slpUtxos.type1.tokens.filter(t=>t.tokenId&&t.tokenId.includes(e))}catch(o){throw console.error("Error in merit.js/getTokenUtxos()"),o}}getTokenQuantity(t){try{let e=0;return t.map(t=>{e+=Number(t.tokenQty)}),e}catch(e){throw console.error("Error in merit.js/getTokenQuantity()"),e}}async calcMerit(t,e){try{if(!Array.isArray(t))throw new Error("Input hydratedUtxo must be an array");const r=this.bchjs.SLP.Address.toCashAddress(e),o=144,n=await this.bchjs.Blockchain.getBlockCount(),s=[];for(let e=0;e<t.length;e++){const i=t[e];let a=i.height;const l=await this.getParentAge(i.tx_hash,r);l&&(a=l.height);let h=(n-a)/o;h=this.bchjs.Util.floor2(h),0===i.height&&(h=0);const c=Number(i.tokenQty)*h;i.age=h,i.merit=Math.floor(c),s.push(i)}return s}catch(r){throw console.error("Error in merit.js/getMerit()"),r}}async getParentAge(t,e){try{let r=!1;for(;t;){const o=await this.findTokenParent(t,e);t=o.tx_hash,o&&(r=o)}return r}catch(r){throw console.error("Error in merit.js/getParentAge()"),r}}async findTokenParent(t,e){try{let r=!1,o=await this.wallet.getTxData([t]);const n=(o=o[0]).tokenId,s=o.vin.map(t=>({txid:t.txid,vout:t.vout})),i=await this.wallet.getTransactions(e);for(let t=0;t<s.length;t++){const e=s[t].txid,o=i.filter(t=>t.tx_hash===e);if(o.length>0)for(let i=0;i<o.length;i++){const e=o[i],a=await this.wallet.getTxData([e.tx_hash]),l=a[0].tokenId;e.tx_pos=s[t].vout,a[0].isValidSlp&&n===l&&(r=e)}}return r}catch(r){throw console.error("Error in findTokenParent()"),r}}async agMerit(t,e,r){try{if(!t)throw new Error("an address must be specified!");if(!e)throw new Error("tokenId must be specified!");const o=await this.getTokenUtxos(t,e,r),n=await this.calcMerit(o,t);let s=0;return n.map(t=>s+=t.merit),Math.floor(s)}catch(o){throw console.error("Error in merit.js/agMerit()"),o}}}(t)}}}));