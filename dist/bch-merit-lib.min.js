!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).BchMessage=t()}}((function(){return class{constructor(t={}){if(!t.wallet)throw new Error("minimal-slp-wallet instance must be passed in the config object when instantiating.");this.wallet=t.wallet,this.merit=new class{constructor(t={}){if(!t.wallet)throw new Error("Instance of minimal-slp-wallet must be passed in the config object when instantiating.");this.wallet=t.wallet,console.log("Initializing MeritLib with interface: "+this.wallet.ar.interface),this.bchjs=t.wallet.bchjs}async getTokenUtxos(t,e,r){try{if(!e)throw new Error("tokenId must be specified!");return t=this.bchjs.SLP.Address.toCashAddress(t),(await this.wallet.getUtxos(t)).slpUtxos.type1.tokens.filter(t=>t.tokenId&&t.tokenId.includes(e))}catch(n){throw console.error("Error in merit.js/getTokenUtxos()"),n}}getTokenQuantity(t){try{let e=0;return t.map(t=>{e+=Number(t.tokenQty)}),e}catch(e){throw console.error("Error in merit.js/getTokenQuantity()"),e}}async calcMerit(t,e){try{if(!Array.isArray(t))throw new Error("Input hydratedUtxo must be an array");const r=this.bchjs.SLP.Address.toCashAddress(e),n=144,i=await this.bchjs.Blockchain.getBlockCount(),o=[];for(let e=0;e<t.length;e++){const s=t[e];let a=s.height;const h=await this.getParentAge(s.tx_hash,r);h&&(a=h.height);let l=(i-a)/n;l=this.bchjs.Util.floor2(l),0===s.height&&(l=0);const c=Number(s.tokenQty)*l;s.age=l,s.merit=Math.floor(c),o.push(s)}return o}catch(r){throw console.error("Error in merit.js/getMerit()"),r}}async getParentAge(t,e){try{let r=!1;for(;t;){const n=await this.findTokenParent(t,e);t=n.tx_hash,n&&(r=n)}return r}catch(r){throw console.error("Error in merit.js/getParentAge()"),r}}async findTokenParent(t,e){try{const r=(await this.bchjs.RawTransactions.getRawTransaction(t,!0)).vin.map(t=>({txid:t.txid,vout:t.vout})),n=await this.bchjs.Electrumx.transactions(e),i={index:null,height:null,utxo:!1};for(let t=0;t<r.length;t++){const e=r[t].txid,o=n.transactions.filter(t=>t.tx_hash===e);if(o.length>0)for(let n=0;n<o.length;n++){let e=o[n];e.tx_pos=r[t].vout;const s=[{utxos:[e]}];(e=(await this.bchjs.SLP.Utils.hydrateUtxos(s)).slpUtxos[0].utxos[0]).isValid&&(i.height?e.height<i.height&&(i.height=e.height,i.index=t,i.utxo=e):(i.height=e.height,i.index=t,i.utxo=e))}}return i.utxo}catch(r){throw console.error("Error in findTokenParent()"),r}}async agMerit(t,e,r){try{if(!t)throw new Error("an address must be specified!");if(!e)throw new Error("tokenId must be specified!");const n=await this.getTokenUtxos(t,e,r),i=await this.calcMerit(n,t);let o=0;return i.map(t=>o+=t.merit),Math.floor(o)}catch(n){throw console.error("Error in merit.js/agMerit()"),n}}}(t)}}}));